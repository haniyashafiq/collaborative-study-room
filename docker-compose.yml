# services:
#   db:
#     image: postgres:15
#     container_name: studyroom_db
#     restart: always
#     environment:
#       POSTGRES_USER: ${POSTGRES_USER}
#       POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#       POSTGRES_DB: ${POSTGRES_DB}
#     ports:
#       - "${POSTGRES_PORT}:5432"
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
#       interval: 5s
#       timeout: 5s
#       retries: 5

#   backend:
#     build: .
#     container_name: studyroom_backend
#     restart: always
#     depends_on:
#       db:
#         condition: service_healthy
#     environment:
#       DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
#       SECRET_KEY: ${SECRET_KEY}
#       ALGORITHM: ${ALGORITHM}
#       ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}
#     ports:
#       - "8000:8000"
#     volumes:
#       - .:/app
#     command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

# volumes:
#   postgres_data:

services:
  db:
    image: postgres:15
    container_name: studyroom_db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db-init:/docker-entrypoint-initdb.d  # <--- mount init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build: .
    container_name: studyroom_backend
    restart: always
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql+asyncpg://studyuser:studypass@db:5432/studyroom
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: ${ALGORITHM}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

volumes:
  postgres_data:

